// Syntax Highlighting
@mixin syndark($h0,$h1,$h2,$h3,$h4,$h5,$h6,$h7,$h8,$h9,$h10,$h11,$h12,$h13,$h14,$h15,$h16,$h17,$h18,$h19,$h20,$h21,$h22,$h23,$h24,$h25,$h26,$h27,$h28,$ha) {
  #{--h0}: $h0;// background color
  #{--h1}: $h1;// unstyled text
  #{--h2}: $h2;// comments
  #{--h3}: $h3;// red, support function
  #{--h4}: $h4;// orange, punctuation, constant, variable, json-key
  #{--h5}: $h5;// tan, entity/function name
  #{--h6}: $h6;// green, string
  #{--h7}: $h7;// teal, escape character
  #{--h8}: $h8;// blue, declaration, tag, property
  #{--h9}: $h9;// purple, operators
  #{--h10}: $h10;
  #{--h11}: $h11;
  #{--h12}: $h12;
  #{--h13}: $h13;
  #{--h14}: $h14;
  #{--h15}: $h15;
  #{--h16}: $h16;
  #{--h17}: $h17;
  #{--h18}: $h18;
  #{--h19}: $h19;
  #{--h20}: $h20;
  #{--h21}: $h21;
  #{--h22}: $h22;
  #{--h23}: $h23;
  #{--h24}: $h24;
  #{--h25}: $h25;
  #{--h26}: $h26;
  #{--h27}: $h27;
  #{--h28}: $h28;
  #{--ha}: $ha;// mark/highlight line
}
@mixin synlight($h0,$h1,$h2,$h3,$h4,$h5,$h6,$h7,$h8,$h9,$h10,$h11,$h12,$h13,$h14,$h15,$h16,$h17,$h18,$h19,$h20,$h21,$h22,$h23,$h24,$h25,$h26,$h27,$h28,$ha) {
  #{--h0}: $h0;// background color
  #{--h1}: $h1;// unstyled text
  #{--h2}: $h2;// comments
  #{--h3}: $h3;// red, support function
  #{--h4}: $h4;// orange, punctuation, constant, variable, json-key
  #{--h5}: $h5;// tan, entity/function name
  #{--h6}: $h6;// green, string
  #{--h7}: $h7;// teal, escape character
  #{--h8}: $h8;// blue, declaration, tag, property
  #{--h9}: $h9;// purple, operators
  #{--h10}: $h10;
  #{--h11}: $h11;
  #{--h12}: $h12;
  #{--h13}: $h13;
  #{--h14}: $h14;
  #{--h15}: $h15;
  #{--h16}: $h16;
  #{--h17}: $h17;
  #{--h18}: $h18;
  #{--h19}: $h19;
  #{--h20}: $h20;
  #{--h21}: $h21;
  #{--h22}: $h22;
  #{--h23}: $h23;
  #{--h24}: $h24;
  #{--h25}: $h25;
  #{--h26}: $h26;
  #{--h27}: $h27;
  #{--h28}: $h28;
  #{--ha}: $ha;// mark/highlight line
}

@function color($color-syntax,$dark,$h0,$h1,$h2,$h3,$h4,$h5,$h6,$h7,$h8,$h9,$h10,$h11,$h12,$h13,$h14,$h15,$h16,$h17,$h18,$h19,$h20,$h21,$h22,$h23,$h24,$h25,$h26,$h27,$h28,$ha) {
  @if $color-syntax == "charcoal" {//placeholder, this is actuall a copy of abridge syntax
    @if $dark {/// Dark Syntax Colors
      $h0: #191919 !default;// background color
      $h1: #ddd !default;// unstyled text
      $h2: #888 !default;// comments
      $h3: #e65 !default;// red, support function
      $h4: #e83 !default;// orange, punctuation, constant, variable, json-key
      $h5: #eb6 !default;// tan, entity/function name
      $h6: #ac3 !default;// green, string
      $h7: #8db !default;// teal, escape character
      $h8: #6ae !default;// blue, declaration, tag, property
      $h9: #d6e !default;// purple, operators
      $ha: 160% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
      @return $result;
    } @else {/// Light Syntax Colors
      $h0: #f7f7f7 !default;// background color
      $h1: #222 !default;// unstyled text
      $h2: #666 !default;// comments
      $h3: #a21 !default;// red, support function
      $h4: #930 !default;// orange, punctuation, constant, variable, json-key
      $h5: #a50 !default;// tan, entity/function name
      $h6: #350 !default;// green, string
      $h7: #286 !default;// teal, escape character
      $h8: #059 !default;// blue, declaration, tag, property
      $h9: #a3c !default;// purple, operators
      $ha: 92% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
      @return $result;
    }
  } @else if $color-syntax == "dracula" {//placeholder, this is actuall a copy of abridge syntax
    @if $dark {/// Dark Syntax Colors
      $h0: #191919 !default;// background color
      $h1: #ddd !default;// unstyled text
      $h2: #888 !default;// comments
      $h3: #e65 !default;// red, support function
      $h4: #e83 !default;// orange, punctuation, constant, variable, json-key
      $h5: #eb6 !default;// tan, entity/function name
      $h6: #ac3 !default;// green, string
      $h7: #8db !default;// teal, escape character
      $h8: #6ae !default;// blue, declaration, tag, property
      $h9: #d6e !default;// purple, operators
      $ha: 160% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
      @return $result;
    } @else {/// Light Syntax Colors
      $h0: #f7f7f7 !default;// background color
      $h1: #222 !default;// unstyled text
      $h2: #666 !default;// comments
      $h3: #a21 !default;// red, support function
      $h4: #930 !default;// orange, punctuation, constant, variable, json-key
      $h5: #a50 !default;// tan, entity/function name
      $h6: #350 !default;// green, string
      $h7: #286 !default;// teal, escape character
      $h8: #059 !default;// blue, declaration, tag, property
      $h9: #a3c !default;// purple, operators
      $ha: 92% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
      @return $result;
    }
  } @else {//abridge syntax colors (default)
    // @if $dark {/// Dark Syntax Colors
    //   $h0: #191919 !default;// background color
    //   $h1: #ddd !default;// unstyled text
    //   $h2: #888 !default;// comments
    //   $h3: #e65 !default;// red, support function
    //   $h4: #e83 !default;// orange, punctuation, constant, variable, json-key
    //   $h5: #eb6 !default;// tan, entity/function name
    //   $h6: #ac3 !default;// green, string
    //   $h7: #8db !default;// teal, escape character
    //   $h8: #6ae !default;// blue, declaration, tag, property
    //   $h9: #d6e !default;// purple, operators
    //   $ha: 160% !default;// mark/highlight line
    //   $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
    //   @return $result;
    // } @else {/// Light Syntax Colors
    //   $h0: #f7f7f7 !default;// background color
    //   $h1: #222 !default;// unstyled text
    //   $h2: #666 !default;// comments
    //   $h3: #a21 !default;// red, support function
    //   $h4: #930 !default;// orange, punctuation, constant, variable, json-key
    //   $h5: #a50 !default;// tan, entity/function name
    //   $h6: #350 !default;// green, string
    //   $h7: #286 !default;// teal, escape character
    //   $h8: #059 !default;// blue, declaration, tag, property
    //   $h9: #a3c !default;// purple, operators
    //   $ha: 92% !default;// mark/highlight line
    //   $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $ha;
    //   @return $result;
    // }
    @if $dark {/// Dark Syntax Colors
      $h0: #191919 !default;// background color
      $h1: #ddd !default;// unstyled text
      $h2: #5C6370 !default;// comments
      $h3: #E06C75 !default;// a  (int a;)
      $h4: #ac3 !default;// "This is a string"
      $h5: #D19A66 !default;// 10  (a = 10;)
      $h6: #56B6C2 !default;// /n
      $h7: #D19A66 !default;// false, true, etc...
      $h8: #D19A66 !default;// BUF  (const BUF: usize = 10 * 1024;)
      $h9: #C678DD !default;// use, crate, let, etc.
      $h10: #ABB2BF !default;// = * - + /
      $h11: #ABB2BF !default;// separators: commas, colons, etc.  terminator:  endline semicolon, etc.
      $h12: #C1C3C5 !default;// () [] {}
      $h13: #D19A66 !default;//   .  ::
      $h14: #D19A66 !default;// #  (#[cfg(test)])
      $h15: #C678DD !default;// const, pub, mut, Self, fn
      $h16: #C678DD !default;// const, struct
      $h17: #61AFEF !default;// new, function names
      $h18: #D19A66 !default;// key in toml entries
      $h19: #D19A66 !default;// v1   (fn lookup(v1))
      $h20: #D19A66 !default;// self  (self.html.push(c))
      $h21: #E06C75 !default;// html tag name, eg:  html, head, meta, title, body, etc.
      $h22: #D19A66 !default;// html tag brackets <>
      $h23: #D19A66 !default;// html attribute name, eg: lang, charset
      $h24: #D19A66 !default;// function name as variable value, and annotation:  derive  (#[derive(Debug)])
      $h25: #56B6C2 !default;// support function, eg:   extend  (self.html.extend(b"<span");)  // macros, eg:  println!  print!  format!
      $h26: #D19A66 !default;// type: Vec, Some, str, int
      $h27: #E06C75 !default;// property name, eg css: font-size, text-align, etc.
      $h28: #E06C75 !default;// json
      $ha: 160% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $h16 $h17 $h18 $h19 $h20 $h21 $h22 $h23 $h24 $h25 $h26 $h27 $h28 $ha;
      @return $result;
    } @else {/// Light Syntax Colors
      $h0: #191919 !default;// background color
      $h1: #ddd !default;// unstyled text
      $h2: #5C6370 !default;// comments
      $h3: #E06C75 !default;// a  (int a;)
      $h4: #ac3 !default;// "This is a string"
      $h5: #D19A66 !default;// 10  (a = 10;)
      $h6: #56B6C2 !default;// /n
      $h7: #D19A66 !default;// false, true, etc...
      $h8: #D19A66 !default;// BUF  (const BUF: usize = 10 * 1024;)
      $h9: #C678DD !default;// use, crate, let, etc.
      $h10: #ABB2BF !default;// = * - + /
      $h11: #ABB2BF !default;// separators: commas, colons, etc.  terminator:  endline semicolon, etc.
      $h12: #C1C3C5 !default;// () [] {}
      $h13: #D19A66 !default;//   .  ::
      $h14: #D19A66 !default;// #  (#[cfg(test)])
      $h15: #C678DD !default;// const, pub, mut, Self, fn
      $h16: #C678DD !default;// const, struct
      $h17: #61AFEF !default;// new, function names
      $h18: #D19A66 !default;// key in toml entries
      $h19: #D19A66 !default;// v1   (fn lookup(v1))
      $h20: #D19A66 !default;// self  (self.html.push(c))
      $h21: #E06C75 !default;// html tag name, eg:  html, head, meta, title, body, etc.
      $h22: #D19A66 !default;// html tag brackets <>
      $h23: #D19A66 !default;// html attribute name, eg: lang, charset
      $h24: #D19A66 !default;// function name as variable value, and annotation:  derive  (#[derive(Debug)])
      $h25: #56B6C2 !default;// support function, eg:   extend  (self.html.extend(b"<span");)  // macros, eg:  println!  print!  format!
      $h26: #D19A66 !default;// type: Vec, Some, str, int
      $h27: #E06C75 !default;// property name, eg css: font-size, text-align, etc.
      $h28: #E06C75 !default;// json
      $ha: 92% !default;// mark/highlight line
      $result: $h0 $h1 $h2 $h3 $h4 $h5 $h6 $h7 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $h16 $h17 $h18 $h19 $h20 $h21 $h22 $h23 $h24 $h25 $h26 $h27 $h28 $ha;
      @return $result;
    }
  }
}

